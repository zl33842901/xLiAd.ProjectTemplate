@inject IConfigModel config
<el-row style="padding:3px;margin:3px;">
    <el-breadcrumb separator="/">
        <el-breadcrumb-item :to="{ path: '/' }">首页</el-breadcrumb-item>
    </el-breadcrumb>
</el-row>

<el-row style="width: 100%;margin: 5px 0 5px 0;background-color:#ddd;padding:4px 0 4px 0;" :gutter="10">
    <el-row :gutter="10" style="margin:10px 0">
        <el-col :span="5" style="margin-left:10px;">请选择模板类型：</el-col>
        <el-col :span="8">
            <el-radio-group v-model="SelectedId" v-on:change="selectIdChanged">
                @foreach (var item in config.Templates)
                {
                    <el-radio label="@item.Id">@item.Name</el-radio>
                }
            </el-radio-group>
        </el-col>
    </el-row>
    <el-row :gutter="10">
        <el-col :span="5" style="margin-left:10px;">请输入解决方案名称：</el-col>
        <el-col :span="8"><el-input v-model="SolutionName"></el-input></el-col>
    </el-row>
    <el-row :gutter="10" v-for="(item, index) in tableData" style="height:38px;">
        <el-col :span="5" style="margin-left:10px;">{{item.OptionDescription}}</el-col>
        <el-col :span="15">
            <el-radio-group v-model="tableData[index].Input" v-if="tableData[index].Type==1" v-on:change="optionchanged(index)">
                <el-radio :label="itm.ItemName" v-for="itm in item.Options">{{itm.ItemName}}</el-radio>
            </el-radio-group>
            <el-input v-model="tableData[index].Input" v-else></el-input>
        </el-col>
    </el-row>
    <el-row :gutter="10">
        <el-col :span="8" style="margin-left:10px;"><el-button v-on:click="DoConvert" type="success">生成解决方案</el-button></el-col>
    </el-row>
    <el-row>
        &nbsp;
    </el-row>
    <el-row style="font-size:12px;color:#666666" :gutter="20">
        <el-col :span="23" style="margin-left:10px;">
            <el-row style="text-align:center">简介：</el-row>
            <el-row>
                <br />
                xLiAd 模板项目是一个简单的快速开发平台，基于 AspNetCore 3.1，可实现在数据库设计完成的情况下，几分钟搭建好内容管理平台。<br />
                集成了以下的功能：<br />
                1，基本的增删改查。数据库连接使用基于 Dapper 的 xLiAd.DapperEx（https://github.com/zl33842901/DapperEx），支持SqlServer、MySql，有计划支持 Pg。<br />
                2，日志功能。日志使用 xLiAd.DiagnosticLogCenter（https://github.com/zl33842901/DiagnosticLogCenter），切片方式自动记录接口日志。需要搭建收集端和UI端，不接入不会影响其他功能。<br />
                3，切片缓存。切片缓存使用 xLiAd.AspectCache（https://github.com/zl33842901/xLiAd.AspectCache），支持内存缓存和 Redis 缓存。<br />
                4，切片事务。基于 xLiAd.DapperEx 和 AspectCore 的支持，使数据库事务的使用大大简化，项目模板里的 AspectTransactionAttribute 类只不到40行代码，即实现切片事务，使开发人员能把精力集中在业务逻辑上。<br />
                5，超时与重试。基于 Polly 实现，代码在 AspectTimeoutRetry 类中。<br />
                6，行为次数限制。基于 xLiAd.Limiter（https://github.com/zl33842901/Limiter）。<br />
                7，代码生成。根据数据库的表结构，快速生成增删改查代码。前端采用 Vue2.0 不分离模式、Element-UI。代码生成器使用 xLiAd.Gaia （暂未开源）。<br />
                <br />
                模板项目开源地址：https://github.com/zl33842901/xLiAd.ProjectTemplate <br />
                官方部署地址：http://code.xliad.com/ <br />
                <br />
                使用方法：<br />
                一，打开 http://code.xliad.com/ ，输入解决方案名称，如 XLI.SampleProject ，选择数据库类型，输入数据库连接串（取得代码后再改也可），点击[生成解决方案]，下载代码。<br />
                二，把下载下来的 zip 包解压，得到项目文件，使用 Vs2019 打开解方案。<br />
                三，在解决方案中，确认 appsettings.*.json 的三个文件中的数据库连接串 SqlConnectionString 配置的数据库地址可以访问；把 WebApp 项目设为启动项目；把调试方式由 IIS Express 改为项目调试（不必须）。<br />
                四，按 F5 以调试模式运行项目；请确认跑起来的首页显示的各项配置正确（主要是编码，别出现乱码）。<br />
                五，在浏览器地址栏中输入 http://localhost:5000/Gaia 回车，稍等 20 秒（SqlServer 较慢，MySql 较快，可 F12 关注一下接口返回）。<br />
                六，选择要生成的表及功能，并在模块名称中输入合适的名称，顶部的一些字段如果输入正确可以生成正确的逻辑，建议所有表采用统一的创建时间创建人等字段；输入好之后点“确定生成”。<br />
                七，稍等片刻，系统会提示：代码已生成，请停止后重新调试。  这时，请停止调试，然后再次按 F5 运行起项目，这时，如果你的表都有主键或标识，代码就直接可以跑起来。<br />
                八，点击栏目对应菜单，进去后，增删改查功能都可以用了。<br />
                <br />
            </el-row>

        </el-col>
    </el-row>
</el-row>

@section Scripts{
    <script type="text/javascript">
        var app = new Vue({
            el: '#app',
            data: {
                activeIndex: "activeIndex",
                tableData: [],
                SolutionName: '',
                SelectedId:'',
                @await Html.PartialAsync("CommonData")
            },
            methods: {
                @await Html.PartialAsync("CommonMethod")
                GetData: function () {
                    var that = this;
                    CommonAjaxPost("/Home/GetOptionsConfig",
                        { id: this.SelectedId },
                        function (data) {
                            if (data.result) {
                                that.tableData = data.data.Items;
                                for (var i = 0; i < that.tableData.length; i++) {
                                    if (that.tableData[i].Type == 1) {
                                        that.tableData[i].Input = that.tableData[i].Options.filter(function (x) { return x.IsDefault; })[0].ItemName;
                                    } else {
                                        that.tableData[i].Input = that.tableData[i].Options.filter(function (x) { return x.IsDefault; })[0].ItemName;
                                    }
                                }
                            } else {
                                that.$message.error("出错了：" + data.message);
                            }
                        });
                },
                selectIdChanged: function () {
                    this.GetData();
                },
                optionchanged: function (index) {
                    Vue.set(this.tableData, index, this.tableData[index])
                },
                DoConvert: function () {
                    var that = this;
                    var t = [];
                    for (var i = 0; i < that.tableData.length; i++) {
                        t.push({
                            OptionCode: that.tableData[i].OptionCode, SelectOrInput: that.tableData[i].Input
                        });
                    }
                    JsonAjaxPost("/Home/DoConvert",
                        { SolutionName: this.SolutionName, Items: t, SelectedId: this.SelectedId },
                        function (data) {
                            if (data.result) {
                                that.$message("操作成功，稍候将下载。");
                                window.open("/Home/GetFile?fn=" + data.data);
                            } else {
                                that.$message.error("出错了：" + data.message);
                            }
                        });
                }
            },
            mounted: function () {
                @await Html.PartialAsync("CommonMounted")
                //this.GetData();
            }
        });
    </script>
}